---
title: "dataTransformation"
format: html
editor: visual
---

# **Data transformation**

## **Introduction**

Visualization is an important tool for generating insight, but it’s rare that you get the data in exactly the right form you need to make the graph you want. Often you’ll need to create some new variables or summaries to answer your questions with your data, or maybe you just want to rename the variables or reorder the observations to make the data a little easier to work with. You’ll learn how to do all that (and more!) in this chapter, which will introduce you to data transformation using the **dplyr** package and a new dataset on flights that departed from New York City in 2013.

The goal of this chapter is to give you an overview of all the key tools for transforming a data frame. We’ll start with functions that operate on rows and then columns of a data frame, then circle back to talk more about the pipe, an important tool that you use to combine verbs. We will then introduce the ability to work with groups. We will end the chapter with a case study that showcases these functions in action. In later chapters, we’ll return to the functions in more detail as we start to dig into specific types of data (e.g., numbers, strings, dates).

### Libraries

```{r}
library(tidyverse)
library(nycflights13)
```

Take careful note of the conflicts message that’s printed when you load the tidyverse. It tells you that dplyr overwrites some functions in base R. If you want to use the base version of these functions after loading dplyr, you’ll need to use their full names: [`stats::filter()`](https://rdrr.io/r/stats/filter.html) and [`stats::lag()`](https://rdrr.io/r/stats/lag.html). So far, we’ve mostly ignored which package a function comes from because it doesn’t usually matter. However, knowing the package can help you find help and find related functions, so when we need to be precise about which package a function comes from, we’ll use the same syntax as R: `packagename::functionname()`.

### **nycflights13**

To explore the basic dplyr verbs, we will use [`nycflights13::flights`](https://rdrr.io/pkg/nycflights13/man/flights.html). This dataset contains all 336,776 flights that departed from New York City in 2013. The data comes from the US [Bureau of Transportation Statistics](https://www.transtats.bts.gov/DL_SelectFields.aspx?gnoyr_VQ=FGJ&QO_fu146_anzr=b0-gvzr) and is documented in [`?flights`](https://rdrr.io/pkg/nycflights13/man/flights.html).

```{r}
flights
```

`flights` is a tibble, a special type of data frame used by the tidyverse to avoid some common gotchas. The most important difference between tibbles and data frames is the way tibbles print; they are designed for large datasets, so they only show the first few rows and only the columns that fit on one screen. There are a few options to see everything. If you’re using RStudio, the most convenient is probably `View(flights)`, which opens an interactive, scrollable, and filterable view. Otherwise you can use `print(flights, width = Inf)` to show all columns, or use [`glimpse()`](https://pillar.r-lib.org/reference/glimpse.html):

```{r}
glimpse(flights)
```

```{r}
view(flights)
```

In both views, the variable names are followed by abbreviations that tell you the type of each variable: `<int>` is short for integer, `<dbl>` is short for double (aka real numbers), `<chr>` for character (aka strings), and `<dttm>` for date-time. These are important because the operations you can perform on a column depend heavily on its “type.”

### **dplyr basics**

You’re about to learn the primary dplyr verbs (functions), which will allow you to solve the vast majority of your data manipulation challenges. But before we discuss their individual differences, it’s worth stating what they have in common:

1.  The first argument is always a data frame.

2.  The subsequent arguments typically describe which columns to operate on using the variable names (without quotes).

3.  The output is always a new data frame.

Because each verb does one thing well, solving complex problems will usually require combining multiple verbs, and we’ll do so with the pipe, `|>`. We’ll discuss the pipe more in [Section 3.4](https://r4ds.hadley.nz/data-transform.html#sec-the-pipe), but in brief, the pipe takes the thing on its left and passes it along to the function on its right so that `x |> f(y)` is equivalent to `f(x, y)`, and `x |> f(y) |> g(z)` is equivalent to `g(f(x, y), z)`. The easiest way to pronounce the pipe is “then”. That makes it possible to get a sense of the following code even though you haven’t yet learned the details:

```{r}
flights|>
  filter(dest == "IAH") |>
  group_by(year, month, day) |>
  summarize(
    arr_delay = mean(arr_delay, na.rm = TRUE)
  )
```

##  **Rows**

The most important verbs that operate on rows of a dataset are [`filter()`](https://dplyr.tidyverse.org/reference/filter.html), which changes which rows are present without changing their order, and [`arrange()`](https://dplyr.tidyverse.org/reference/arrange.html), which changes the order of the rows without changing which are present. Both functions only affect the rows, and the columns are left unchanged. We’ll also discuss [`distinct()`](https://dplyr.tidyverse.org/reference/distinct.html) which finds rows with unique values. Unlike [`arrange()`](https://dplyr.tidyverse.org/reference/arrange.html) and [`filter()`](https://dplyr.tidyverse.org/reference/filter.html) it can also optionally modify the columns.

[`filter()`](https://dplyr.tidyverse.org/reference/filter.html) allows you to keep rows based on the values of the columns^[1](https://r4ds.hadley.nz/data-transform.html#fn1)^. The first argument is the data frame. The second and subsequent arguments are the conditions that must be true to keep the row. For example, we could find all flights that departed more than 120 minutes (two hours) late:

```{r}
flights |> filter(dep_delay > 120)
```

As well as `>` (greater than), you can use `>=` (greater than or equal to), `<` (less than), `<=` (less than or equal to), `==` (equal to), and `!=` (not equal to). You can also combine conditions with `&` or `,` to indicate “and” (check for both conditions) or with `|` to indicate “or” (check for either condition):

```{r}
flights |> filter(month ==1 & day ==1)
```

There’s a useful shortcut when you’re combining `|` and `==`: `%in%`. It keeps rows where the variable equals one of the values on the right:

```{r}
flights |> filter(month %in% c(1,2))
```

When you run [`filter()`](https://dplyr.tidyverse.org/reference/filter.html) dplyr executes the filtering operation, creating a new data frame, and then prints it. It doesn’t modify the existing `flights` dataset because dplyr functions never modify their inputs. To save the result, you need to use the assignment operator, `<-`:

```{r}
jan1 <- flights|>filter(month == 1 & day == 1)
jan1
```

### **`arrange()`**

[`arrange()`](https://dplyr.tidyverse.org/reference/arrange.html) changes the order of the rows based on the value of the columns. It takes a data frame and a set of column names (or more complicated expressions) to order by. If you provide more than one column name, each additional column will be used to break ties in the values of the preceding columns. For example, the following code sorts by the departure time, which is spread over four columns. We get the earliest years first, then within a year, the earliest months, etc.

```{r}
flights |> arrange(year, month, day, dep_time)
```

```{r}
flights |> arrange(desc(dep_delay))
```

### **`distinct()`**

[`distinct()`](https://dplyr.tidyverse.org/reference/distinct.html) finds all the unique rows in a dataset, so technically, it primarily operates on the rows. Most of the time, however, you’ll want the distinct combination of some variables, so you can also optionally supply column names:

```{r}
flights|>distinct()
```

```{r}
flights |> distinct(origin, dest)
```

Alternatively, if you want to keep the other columns when filtering for unique rows, you can use the `.keep_all = TRUE` option.

```{r}
flights |> distinct(origin, dest, .keep_all = TRUE)
```

f you want to find the number of occurrences instead, you’re better off swapping [`distinct()`](https://dplyr.tidyverse.org/reference/distinct.html) for [`count()`](https://dplyr.tidyverse.org/reference/count.html). With the `sort = TRUE` argument, you can arrange them in descending order of the number of occurrences.

```{r}
flights |>
  count(origin, dest, sort = TRUE)
```

### **Exercises**

1.  n a single pipeline for each condition, find all flights that meet the condition:

    -   Had an arrival delay of two or more hours

    -   Flew to Houston (`IAH` or `HOU`)

    -   Were operated by United, American, or Delta

    -   Departed in summer (July, August, and September)

    -   Arrived more than two hours late but didn’t leave late

    -   Were delayed by at least an hour, but made up over 30 minutes in flight

    ```{r}
    flights
    ```

    ```{r}
    flights |> filter(arr_delay >= 2)
    ```

    ```{r}
    flights |> filter(dest == "IAH")
    ```

    ```{r}
    flights |> filter(carrier %in% c("UA", "AA", "DL" ))
    ```

    ```{r}
    flights |> filter(month %in% c(7,8,9), order_by = TRUE)
    ```

    ```{r}
    flights |> filter(arr_delay > 2 & dep_delay == 0)
    ```

    ```{r}
    flights |> filter(arr_delay >= 1 & dep_delay - arr_delay > 30 )
    ```

## **Columns**

There are four important verbs that affect the columns without changing the rows: [`mutate()`](https://dplyr.tidyverse.org/reference/mutate.html) creates new columns that are derived from the existing columns, [`select()`](https://dplyr.tidyverse.org/reference/select.html) changes which columns are present, [`rename()`](https://dplyr.tidyverse.org/reference/rename.html) changes the names of the columns, and [`relocate()`](https://dplyr.tidyverse.org/reference/relocate.html) changes the positions of the columns.

### **3.3.1 `mutate()`** 

The job of [`mutate()`](https://dplyr.tidyverse.org/reference/mutate.html) is to add new columns that are calculated from the existing columns. In the transform chapters, you’ll learn a large set of functions that you can use to manipulate different types of variables. For now, we’ll stick with basic algebra, which allows us to compute the `gain`, how much time a delayed flight made up in the air, and the `speed` in miles per hour:

```{r}
flights |> mutate(gain = dep_delay - arr_delay,
                  speed = distance / air_time * 60) |>
  filter()
```

By default, [`mutate()`](https://dplyr.tidyverse.org/reference/mutate.html) adds new columns on the right-hand side of your dataset, which makes it difficult to see what’s happening here. We can use the `.before` argument to instead add the variables to the left-hand side:

```{r}
flights |>
  mutate(
    gain = dep_delay - arr_delay,
    speed = distance / air_time * 60,
  ) |>
  select(gain, speed, carrier)
```

The `.` indicates that `.before` is an argument to the function, not the name of a third new variable we are creating. You can also use `.after` to add after a variable, and in both `.before` and `.after` you can use the variable name instead of a position. For example, we could add the new variables after `day`:

```{r}
flights |> 
  mutate(
    gain = dep_delay - arr_delay,
    speed = distance / air_time * 60,
    .after = day
  )
```

Alternatively, you can control which variables are kept with the `.keep` argument. A particularly useful argument is `"used"` which specifies that we only keep the columns that were involved or created in the [`mutate()`](https://dplyr.tidyverse.org/reference/mutate.html) step. For example, the following output will contain only the variables `dep_delay`, `arr_delay`, `air_time`, `gain`, `hours`, and `gain_per_hour`.

```{r}
flights |> 
  mutate(
    gain = dep_delay - arr_delay,
    hours = air_time / 60,
    gain_per_hour = gain / hours,
    .keep = "used"
  )
```

### **`select()`**

It’s not uncommon to get datasets with hundreds or even thousands of variables. In this situation, the first challenge is often just focusing on the variables you’re interested in. [`select()`](https://dplyr.tidyverse.org/reference/select.html) allows you to rapidly zoom in on a useful subset using operations based on the names of the variables:

-   Select columns by name:

    ```{r}
    flights |> 
      select(year, month, day)
    ```

-   Select all columns between year and day (inclusive):

    ```{r}
    flights |> 
      select(year:day)

    ```

-   Select all columns except those from year to day (inclusive):

    ```{r}
    flights |> 
      select(!year:day)
    ```

-   Select all columns that are characters:

    ```{r}
    flights |> 
      select(where(is.character))
    ```

There are a number of helper functions you can use within [`select()`](https://dplyr.tidyverse.org/reference/select.html):

-   `starts_with("abc")`: matches names that begin with “abc”.

-   `ends_with("xyz")`: matches names that end with “xyz”.

-   `contains("ijk")`: matches names that contain “ijk”.

-   `num_range("x", 1:3)`: matches `x1`, `x2` and `x3`.

See [`?select`](https://dplyr.tidyverse.org/reference/select.html) for more details. Once you know regular expressions (the topic of [Chapter 15](https://r4ds.hadley.nz/regexps.html)) you’ll also be able to use [`matches()`](https://tidyselect.r-lib.org/reference/starts_with.html) to select variables that match a pattern.

You can rename variables as you [`select()`](https://dplyr.tidyverse.org/reference/select.html) them by using `=`. The new name appears on the left-hand side of the `=`, and the old variable appears on the right-hand side:

```{r}
flights |> 
  select(tail_num = tailnum)
#> # A tibble: 336,776 × 1
#>   tail_num
#>   <chr>   
#> 1 N14228  
#> 2 N24211  
#> 3 N619AA  
#> 4 N804JB  
#> 5 N668DN  
#> 6 N39463  
#> # ℹ 336,770 more rows
```

###  **`rename()`**

If you want to keep all the existing variables and just want to rename a few, you can use [`rename()`](https://dplyr.tidyverse.org/reference/rename.html) instead of [`select()`](https://dplyr.tidyverse.org/reference/select.html):

```{r}
flights |>
  rename(tail_num = tailnum)
```

### **`relocate()`**

Use [`relocate()`](https://dplyr.tidyverse.org/reference/relocate.html) to move variables around. You might want to collect related variables together or move important variables to the front. By default [`relocate()`](https://dplyr.tidyverse.org/reference/relocate.html) moves variables to the front:

```{r}
flights |>
  relocate(time_hour, air_time)
```

```{r}
flights|>
  relocate(year:dep_time, .after = time_hour)
flights |> 
  relocate(starts_with("arr"), .before = dep_time)
```

## **The pipe**

We’ve shown you simple examples of the pipe above, but its real power arises when you start to combine multiple verbs. For example, imagine that you wanted to find the fastest flights to Houston’s IAH airport: you need to combine [`filter()`](https://dplyr.tidyverse.org/reference/filter.html), [`mutate()`](https://dplyr.tidyverse.org/reference/mutate.html), [`select()`](https://dplyr.tidyverse.org/reference/select.html), and [`arrange()`](https://dplyr.tidyverse.org/reference/arrange.html):

```{r}
flights|>
  filter(dest == "IAH") |>
  mutate(speed = distance / air_time * 60) |>
  select(year:day, dep_time, carrier, flight, speed) |>
  arrange(desc(speed))
```

## **Groups**

So far you’ve learned about functions that work with rows and columns. dplyr gets even more powerful when you add in the ability to work with groups. In this section, we’ll focus on the most important functions: [`group_by()`](https://dplyr.tidyverse.org/reference/group_by.html), [`summarize()`](https://dplyr.tidyverse.org/reference/summarise.html), and the slice family of functions.

### **`group_by()`** 

Use [`group_by()`](https://dplyr.tidyverse.org/reference/group_by.html) to divide your dataset into groups meaningful for your analysis

```{r}
flights |> group_by(month) |> arrange(desc(month))
```

###  **`summarize()`**

The most important grouped operation is a summary, which, if being used to calculate a single summary statistic, reduces the data frame to have a single row for each group. In dplyr, this operation is performed by [`summarize()`](https://dplyr.tidyverse.org/reference/summarise.html)^[3](https://r4ds.hadley.nz/data-transform.html#fn3)^, as shown by the following example, which computes the average departure delay by month:

```{r}
flights |> group_by(month) |> summarise(avg_delay = mean(dep_delay, na.rm = TRUE), n = n())
```

### **The `slice_` functions**

There are five handy functions that allow you to extract specific rows within each group:

-   `df |> slice_head(n = 1)` takes the first row from each group.

-   `df |> slice_tail(n = 1)` takes the last row in each group.

-   `df |> slice_min(x, n = 1)` takes the row with the smallest value of column `x`.

-   `df |> slice_max(x, n = 1)` takes the row with the largest value of column `x`.

-   `df |> slice_sample(n = 1)` takes one random row.

You can vary `n` to select more than one row, or instead of `n =`, you can use `prop = 0.1` to select (e.g.) 10% of the rows in each group. For example, the following code finds the flights that are most delayed upon arrival at each destination:

```{r}
flights |> 
  group_by(dest) |> 
  slice_max(arr_delay, n = 1, with_ties = FALSE) |>
  relocate(dest)
```

### **Grouping by multiple variables**

You can create groups using more than one variable. For example, we could make a group for each date.

```{r}
daily <- flights |> group_by(year, month, day)
daily
```

```{r}
daily_flights <- daily |> summarize(n = n(), .groups = "keep")
daily_flights
```

### **Ungrouping**

Now let’s see what happens when you summarize an ungrouped data frame.

```{r}
daily |> ungroup() |> 
  summarize(avg_delay = mean(dep_delay, na.rm = TRUE),
            flights = n())
```

You get a single row back because dplyr treats all the rows in an ungrouped data frame as belonging to one group.

### **`.by`**

dplyr 1.1.0 includes a new, experimental, syntax for per-operation grouping, the `.by` argument. [`group_by()`](https://dplyr.tidyverse.org/reference/group_by.html) and [`ungroup()`](https://dplyr.tidyverse.org/reference/group_by.html) aren’t going away, but you can now also use the `.by` argument to group within a single operation:

```{r}
flights |> summarize(
  delay = mean(dep_delay, na.rm = TRUE),
  n = n(),
  .by = c(origin, dest)
)
```

### **Exercises**

1.  Which carrier has the worst average delays? Challenge: can you disentangle the effects of bad airports vs. bad carriers? Why/why not? (Hint: think about `flights |> group_by(carrier, dest) |> summarize(n())`)

    ```{r}
    flights |>
      group_by(carrier) |> 
      summarise(avg_delays = mean(dep_delay, na.rm = TRUE), n = n(), .groups = "keep") |> 
      arrange(desc(avg_delays))

    ```

2.  Find the flights that are most delayed upon departure from each destination.

    ```{r}
    flights |> group_by(origin, year, month, day) |> 
      filter(dep_delay == max(dep_delay, na.rm = TRUE)) |> 
      ungroup()
    ```

3.  How do delays vary over the course of the day? Illustrate your answer with a plot.

    ```{r}

    flights |> 
      ggplot(aes(x = dep_time, y = dep_delay, na.rm = TRUE)) +
      geom_point()
    ```
